<?xml version="1.0" encoding="utf-8"?>

<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" blendMode="normal" mouseEnabled="false" 
    alpha.disabled="0.5" chromeColor="#7F0707">
    
    <fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("com.aristobot.flexmobile.components.windows.AlertWindow")]
	
        ]]>
    </fx:Metadata> 
	
	<fx:Declarations>
		<s:Fade id="fadeIn" target="{closeButton}" alphaFrom="0" alphaTo="1" easer="{new Power(0.5, 3)}" duration="250"/> 
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.aristobot.flexmobile.model.ViewController;
			
			import spark.effects.easing.Power;
		]]>
	</fx:Script>
	
	<fx:Script fb:purpose="styling">

		/* Define the skin elements that should not be colorized. 
		For panel, border and title background are skinned, but the content area and title text are not. */
		static private const exclusions:Array = ["background", "contentGroup", "closeButton"];
		
		/**
		 * @private
		 */  
		override public function get colorizeExclusions():Array {return exclusions;}
		
		protected var padding:Number;
		
		protected var bkgColor:uint;
		
		protected var bkgAlpha:Number;
		
		protected var cornerRadius:Number;
		
		protected var borderColor:uint;
		
		protected var borderThickness:Number;
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = false;
			super.initializationComplete();
			
		}
		
		/**
		 * @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			bkgColor = getStyle("backgroundColor");
			bkgAlpha = getStyle("backgroundAlpha");
			borderThickness = getStyle("borderThickness");
			borderColor = getStyle("borderColor");
			cornerRadius = getStyle("cornerRadius");
			
			var scale:Number = ViewController.getInstance().scale;
			
			chromeGroup.scaleX = scale;
			chromeGroup.scaleY= scale;
			
			closeButton.scaleX = scale;
			closeButton.scaleY= scale;
			
			closeButton.top = (-30*scale);
			closeButton.right = (-30*scale);
			
			borderStroke.color = borderColor;
			borderStroke.weight = borderThickness;
			
			background.left = borderThickness;
			background.top = borderThickness;
			background.right = borderThickness;
			background.bottom = borderThickness;
			
			backgroundOverlay.left = borderThickness;
			backgroundOverlay.top = borderThickness;
			backgroundOverlay.right = borderThickness;
			backgroundOverlay.bottom = borderThickness;
			
			bkgFill.color = bkgColor;
			bkgFill.alpha = bkgAlpha;
			overlayFill.color = bkgColor;
			
			dropShadow.tlRadius = cornerRadius;
			dropShadow.trRadius = cornerRadius;
			dropShadow.blRadius = cornerRadius;
			dropShadow.brRadius = cornerRadius;
			
			setPartCornerRadii(border, true); 
			setPartCornerRadii(background, true);

			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		/**
		 * @private
		 */  
		private function setPartCornerRadii(target:Rect, includeBottom:Boolean):void
		{            
			target.topLeftRadiusX = cornerRadius;
			target.topRightRadiusX = cornerRadius;
			target.bottomLeftRadiusX = cornerRadius;
			target.bottomRightRadiusX = cornerRadius;
		}
		
	</fx:Script>
	<s:states>
		<s:State name="normal"                          stateGroups="openedGroup"/>
		<s:State name="closed"                          stateGroups="closedGroup"/>
		<s:State name="disabled"                        stateGroups="openedGroup"/>
		<s:State name="normalAndLandscape"              stateGroups="openedGroup, landscapeGroup"/>
		<s:State name="closedAndLandscape"              stateGroups="closedGroup, landscapeGroup"/>
		<s:State name="disabledAndLandscape"            stateGroups="openedGroup, landscapeGroup" />
	</s:states>
	
	<s:transitions>
		<s:Transition fromState="closed" toState="normal" autoReverse="true">
			<s:Parallel duration="200">
				<s:Fade target="{chromeGroup}" alphaFrom="0" alphaTo="1" easer="{new Power(0.5, 3)}"/> 
				<s:Fade target="{dropShadow}" alphaFrom="0" alphaTo="0.32" easer="{new Power(0.5, 3)}"/> 
				<s:Move target="{chromeGroup}" disableLayout="true"/>
			</s:Parallel>
		</s:Transition>
		
		<s:Transition fromState="closedAndLandscape" toState="normalAndLandscape" autoReverse="true">
			<s:Parallel duration="250">
				<s:Fade target="{chromeGroup}" alphaFrom="0" alphaTo="1" easer="{new Power(0.5, 3)}"/> 
				<s:Fade target="{dropShadow}" alphaFrom="0" alphaTo="0.32" easer="{new Power(0.5, 3)}"/> 
				<s:Move target="{chromeGroup}" disableLayout="true"/>
			</s:Parallel>
		</s:Transition>
		
		<s:Transition fromState="normal" toState="closed" autoReverse="true">
			<s:Parallel duration="250">
				<s:Fade target="{chromeGroup}" alphaTo="0" easer="{new Power(0.5, 3)}"/> 
				<s:Fade target="{dropShadow}" alphaTo="0" easer="{new Power(0.5, 3)}"/> 
				<s:Fade target="{closeButton}" alphaTo="0" easer="{new Power(0.5, 3)}"/> 
				<s:Move target="{chromeGroup}" disableLayout="true"/>
			</s:Parallel>
		</s:Transition>
		
		<s:Transition fromState="normalAndLandscape" toState="closedAndLandscape" autoReverse="true">
			<s:Parallel duration="250">
				<s:Fade target="{chromeGroup}" alphaTo="0" easer="{new Power(0.5, 3)}"/> 
				<s:Fade target="{dropShadow}" alphaTo="0" easer="{new Power(0.5, 3)}"/> 
				<s:Fade target="{closeButton}" alphaTo="0" easer="{new Power(0.5, 3)}"/> 
				<s:Move target="{chromeGroup}" disableLayout="true"/>
			</s:Parallel>
		</s:Transition>
	</s:transitions>
    
    <!-- drop shadow can't be hittable so it stays sibling of other graphics -->
    <!--- @private -->
    <s:RectangularDropShadow id="dropShadow" blurX="20" blurY="20" alpha="0.32" distance="40" 
                             angle="90" color="#000000" left="0" top="0" right="0" bottom="0"/>
    
    <!-- drop shadow can't be hittable so all other graphics go in this group -->
    <s:Group id="chromeGroup" left="0" right="0" top="0" bottom="0">
        
        
		<s:Rect id="background" left="0" right="0" top="0" bottom="0">
            <s:fill>
				<s:SolidColor id="bkgFill"/>
            </s:fill>
        </s:Rect>
		
		<s:Rect id="backgroundOverlay" left="0" right="0" top="0" bottom="0">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="#FFFFFF" alpha="0.05" ratio="0"/>
					<s:GradientEntry id="overlayFill" color="#000000" alpha="0.2" ratio="1"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		
		<!-- layer 1: border -->
		<s:Rect id="border" left="0" right="0" top="0" bottom="0">
			<s:stroke>
				<!--- @private -->
				<s:SolidColorStroke id="borderStroke"/>
			</s:stroke>
		</s:Rect>
        

        <!--- @copy spark.components.SkinnableContainer#contentGroup -->
        <s:Group id="contentGroup" left="34" right="34" top="34" bottom="34"/>
		            
    </s:Group>
	
	<s:Group id="closeButton" width="72" height="72" visible="false">
		<s:BitmapImage width="48" height="48" id="closeButtonImage" source="@Embed('/assets/images/close.png')" verticalCenter="0" horizontalCenter="0" smooth="true"/>
	</s:Group>
	
</s:SparkSkin>
